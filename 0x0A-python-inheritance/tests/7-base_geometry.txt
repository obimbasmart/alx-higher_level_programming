"""
Doctest for Base Geometry
"""

Import the type:
    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
    >>> bg = BaseGeometry()

Regular check:
    >>> bg.integer_validator("age", 67)

Check for invalid type:
    >>> bg.integer_validator("age", "number")
    Traceback (most recent call last):
        ...
    TypeError: age must be an integer
    >>> bg.integer_validator("age", (5,))
    Traceback (most recent call last):
        ...
    TypeError: age must be an integer
    >>> bg.integer_validator("age", [5])
    Traceback (most recent call last):
        ...
    TypeError: age must be an integer
    >>> bg.integer_validator("age", {5, 2})
    Traceback (most recent call last):
        ...
    TypeError: age must be an integer
    >>> bg.integer_validator("age", None)
    Traceback (most recent call last):
        ...
    TypeError: age must be an integer
    >>> bg.integer_validator("age", True)
    Traceback (most recent call last):
        ...
    TypeError: age must be an integer

Check for negative numbers:
    >>> bg.integer_validator("age", -4)
    Traceback (most recent call last):
        ...
    ValueError: age must be greater than 0

Check for age = 0:
    >>> bg.integer_validator("age", 0)
    Traceback (most recent call last):
        ...
    ValueError: age must be greater than 0

Check for incomplete parameters:
    >>> bg.integer_validator() # doctest: +ELLIPSIS +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
    >>> bg.integer_validator("width") # doctest: +ELLIPSIS +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
        ...
    TypeError: ...

Test for area():
    >>> bg.area()
    Traceback (most recent call last):
        ...
    Exception: area() is not implemented
